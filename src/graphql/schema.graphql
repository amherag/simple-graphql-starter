type User {
  id: ID!
  username: String!
  password: String!
  firstname: String
  lastname: String
  recipes: [Recipe]
  likedRecipes: [Recipe]
}

type Recipe {
  id: ID!
  author: User
  likedBy: [User]
  title: String!
  description: String
  steps: [String]
  ingredients: [Ingredient]
  likeRecipe(
    token: String!
  ): Recipe
  uploadRecipe: String
}

type Ingredient {
  description: String!
  calories: Int
  totalfat: Float
  sugars: Float
  serving: String
  
}

type Token {
  token: String!
}

type Query {
  users: [User]
  user(token: String!): User
  recipes: [Recipe]
  recipe(title: String!): Recipe
  ingredient (
    description: String
  ): Ingredient
  loginurl: String
}

type Mutation {
  createUser (
    username: String!
    password: String!
    firstname: String
    lastname: String
  ): User
  loginUser (
    username: String!
    password: String!
  ): Token
  updateUser (
    username: String!
    password: String!
    firstname: String!
    lastname: String!
  ): User
  deleteUser (
    username: String!
    password: String!
  ): User
  createRecipe(
    token: String!
    title: String!
    description: String
    steps: [String]!
    ingredients: [String]!
  ): String
}

# we need to tell the server which types represent the root query
# and root mutation types. We call them RootQuery and RootMutation by convention.
schema {
  query: Query
  mutation: Mutation
}
